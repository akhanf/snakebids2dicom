
import snakebids
from snakebids import bids


configfile: 'config/snakebids.yml'

#writes inputs_config.yml and updates config dict
config.update(snakebids.generate_inputs(bids_dir=config['bids_dir'],
                            pybids_inputs=config['pybids_inputs'],
                            derivatives=config['derivatives'],
                            participant_label=config['participant_label'],
                            exclude_participant_label=config['exclude_participant_label']))


#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])



def get_all_input():
    if config["push_to_orthanc"]:
        return {
            "t1": expand(
                bids(
                    root="orthanc_push",
                    desc="done",
                    **config["input_wildcards"]["scan"],
                ),
                zip,
                **config["input_zip_lists"]["scan"]
            ),
          }
    else:
        return {
            "t1": expand(
                bids(
                    root="dicom",
                    **config["input_wildcards"]["scan"],
                ),
                zip,
                **config["input_zip_lists"]["scan"],
            ),
       }


rule all:
    input:
        **get_all_input()


def get_studyinstanceuid(wildcards):
    
    from pydicom.uid import generate_uid
    #generate unique uid based on subj wildcards (ie unique for subject/session)
    return generate_uid(entropy_srcs=config['subj_wildcards'].keys())


def get_opts_from_json(wildcards,input):
    import json
    with open(input.json) as f:
        bids = json.load(f)
    return ' '.join( [ f'--{n2d_opt} \"{bids[key]}\"' for key,n2d_opt in config['bids_to_n2d_option'].items()] )

rule nifti2dicom:
    input:
        nii = config["input_path"]["scan"],
        json = config["input_path"]["scan"][:-7]+'.json'
    params:
        studyinstanceuid = get_studyinstanceuid,
        orientation_opt = '--reorient RSP',
        opts_from_json = get_opts_from_json
    output:
        directory(
            bids(
                root="dicom",
                **config["input_wildcards"]["scan"],
            )
        )
    container:
        "docker://tristankk/nifti2dicom:0.4.11"
    shell:
        "nifti2dicom -i {input.nii} -o {output} -y {params.orientation_opt} --studyinstanceuid {params.studyinstanceuid} --patientname {wildcards.subject} --patientid {wildcards.subject} {params.opts_from_json}"

rule push_to_orthanc:
    input:
        bids(
            root="dicom",
            **config["input_wildcards"]["scan"],
        )
    output:
        touch(
            bids(
                root="orthanc_push",
                desc="done",
                **config["input_wildcards"]["scan"],
            )
        )
    script:
        "scripts/push_dicoms_to_orthanc.py"


